using System.IO;
using System.Reflection;
using System.Windows;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using sxlib;
using sxlib.Specialized;

namespace SynUI.Services;

public interface ISynapseService
{
    SxLibBase.SynLoadEvents LoadState { get; }
    SxLibBase.SynAttachEvents AttachState { get; }

    RelayCommand<string> ExecuteCommand { get; }
    RelayCommand AttachCommand { get; }

    void Initialize();
}

public class SynapseService : ObservableObject, ISynapseService
{
    private SxLibOffscreen? api;
    private SxLibBase.SynAttachEvents attachState;
    private SxLibBase.SynLoadEvents loadState;

    public SynapseService()
    {
        ExecuteCommand = new RelayCommand<string>(
            script => api?.Execute(script),
            _ => true
            // AttachState is
            //     SxLibBase.SynAttachEvents.READY or
            //     SxLibBase.SynAttachEvents.ALREADY_INJECTED
        );

        AttachCommand = new RelayCommand(
            () => api?.Attach(),
            () => LoadState == SxLibBase.SynLoadEvents.READY);
    }

    public RelayCommand<string> ExecuteCommand { get; }
    public RelayCommand AttachCommand { get; }

    public SxLibBase.SynLoadEvents LoadState
    {
        get => loadState;
        private set
        {
            SetProperty(ref loadState, value);
            ExecuteCommand.NotifyCanExecuteChanged();
            AttachCommand.NotifyCanExecuteChanged();
        }
    }

    public SxLibBase.SynAttachEvents AttachState
    {
        get => attachState;
        private set
        {
            SetProperty(ref attachState, value);
            ExecuteCommand.NotifyCanExecuteChanged();
            AttachCommand.NotifyCanExecuteChanged();
        }
    }

    public void Initialize()
    {
        api = SxLib.InitializeOffscreen(Directory.GetCurrentDirectory());
        api.LoadEvent += _sxlib_OnLoadEvent;
        api.AttachEvent += _sxlib_OnAttachEvent;

        // Add autoexec script
        var autoexecPath = Path.Combine(Directory.GetCurrentDirectory(), "autoexec",
            "THIS FILE IS GENERATED BY SYNUI DO NOT REMOVE.lua");
        using var script = Assembly.GetExecutingAssembly()
            .GetManifestResourceStream("SynUI.Resources.synui-auto-exec.lua");
        using var file = File.Open(autoexecPath, FileMode.OpenOrCreate);
        script?.CopyTo(file);

        api.Load();
    }

    private void _sxlib_OnAttachEvent(SxLibBase.SynAttachEvents @event, object param)
    {
        Application.Current.Dispatcher.Invoke(() => AttachState = @event);
    }

    private void _sxlib_OnLoadEvent(SxLibBase.SynLoadEvents @event, object param)
    {
        Application.Current.Dispatcher.Invoke(() => LoadState = @event);
    }
}